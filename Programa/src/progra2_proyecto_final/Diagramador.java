/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package progra2_proyecto_final;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;

/**
 *
 * @author Alexy jr
 */
public class Diagramador extends javax.swing.JFrame {

    /**
     * Creates new form Diagramador
     */
    public Diagramador() {
        initComponents();
        DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_diagrama.getModel();
        Clases PADRE = new Clases("Proyecto", "Proyecto", "", "", "");
        DefaultMutableTreeNode PADRE1 = new DefaultMutableTreeNode(PADRE);
        modeloARBOL.setRoot(PADRE1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jppm_menu1 = new javax.swing.JPopupMenu();
        Agregar = new javax.swing.JMenu();
        jmi_agregar_clase = new javax.swing.JMenuItem();
        jmi_agregar_atributo = new javax.swing.JMenuItem();
        jmi_agregar_metodo = new javax.swing.JMenuItem();
        jmi_agregar_interfaz = new javax.swing.JMenuItem();
        Abstraccion = new javax.swing.JMenu();
        jmi_hacer_abstracta = new javax.swing.JMenuItem();
        jmi_deshacer_abstracta = new javax.swing.JMenuItem();
        jmi_implementar_interfaz = new javax.swing.JMenuItem();
        jmi_modificar = new javax.swing.JMenuItem();
        jmi_eliminar = new javax.swing.JMenuItem();
        jmi_generar_codigo = new javax.swing.JMenuItem();
        jd_agregar_clase = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tf_nombre_clase_agregar = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        cb_visibilidad_clase_agregar = new javax.swing.JComboBox();
        jLabel27 = new javax.swing.JLabel();
        jd_agregar_atributos = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tf_nombre_atributo_agregar = new javax.swing.JTextField();
        cb_tipo_atributo_agregar = new javax.swing.JComboBox();
        cb_visibilidad_atributo_agregar = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jd_agregar_metodos = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ta_metodo_agregar = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        tf_nombre_metodo_agregar = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jd_modificar_clase = new javax.swing.JDialog();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        tf_nombre_clase_modificar = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        cb_visibilidad_clase_modificar = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();
        jd_modificar_atributos = new javax.swing.JDialog();
        jButton6 = new javax.swing.JButton();
        cb_visibilidad_atributo_modificar = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        tf_nombre_atributo_modificar = new javax.swing.JTextField();
        cb_tipo_atributo_modificar = new javax.swing.JComboBox();
        jLabel17 = new javax.swing.JLabel();
        jd_modificar_metodos = new javax.swing.JDialog();
        jLabel18 = new javax.swing.JLabel();
        tf_nombre_metodo_modificar = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        ta_metodo_modificar = new javax.swing.JTextArea();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jd_agregar_interfaz = new javax.swing.JDialog();
        jLabel23 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        tf_nombre_interfaz_agregar = new javax.swing.JTextField();
        jd_implementar_interfaz = new javax.swing.JDialog();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        cb_interfaces_implementar = new javax.swing.JComboBox();
        Menu2 = new javax.swing.JPopupMenu();
        Ver_codigo = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_diagrama = new javax.swing.JTree();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt_base_de_datos = new javax.swing.JTree();
        jScrollPane5 = new javax.swing.JScrollPane();
        ta_comando_base_de_datos = new javax.swing.JTextArea();
        jButton7 = new javax.swing.JButton();

        Agregar.setText("Agregar");

        jmi_agregar_clase.setText("Clase");
        jmi_agregar_clase.setToolTipText("");
        jmi_agregar_clase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_agregar_claseActionPerformed(evt);
            }
        });
        Agregar.add(jmi_agregar_clase);

        jmi_agregar_atributo.setText("Atributo");
        jmi_agregar_atributo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_agregar_atributoActionPerformed(evt);
            }
        });
        Agregar.add(jmi_agregar_atributo);

        jmi_agregar_metodo.setText("Metodo");
        jmi_agregar_metodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_agregar_metodoActionPerformed(evt);
            }
        });
        Agregar.add(jmi_agregar_metodo);

        jmi_agregar_interfaz.setText("Interfaz");
        jmi_agregar_interfaz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_agregar_interfazActionPerformed(evt);
            }
        });
        Agregar.add(jmi_agregar_interfaz);

        jppm_menu1.add(Agregar);

        Abstraccion.setText("Abstraccion");

        jmi_hacer_abstracta.setText("Hacer abstracta");
        jmi_hacer_abstracta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_hacer_abstractaActionPerformed(evt);
            }
        });
        Abstraccion.add(jmi_hacer_abstracta);

        jmi_deshacer_abstracta.setText("Deshacer abstraccion");
        jmi_deshacer_abstracta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_deshacer_abstractaActionPerformed(evt);
            }
        });
        Abstraccion.add(jmi_deshacer_abstracta);

        jppm_menu1.add(Abstraccion);

        jmi_implementar_interfaz.setText("Implementar interfaz");
        jmi_implementar_interfaz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_implementar_interfazActionPerformed(evt);
            }
        });
        jppm_menu1.add(jmi_implementar_interfaz);

        jmi_modificar.setText("Modificar");
        jmi_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_modificarActionPerformed(evt);
            }
        });
        jppm_menu1.add(jmi_modificar);

        jmi_eliminar.setText("Eliminar");
        jmi_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_eliminarActionPerformed(evt);
            }
        });
        jppm_menu1.add(jmi_eliminar);

        jmi_generar_codigo.setText("Generar codigo");
        jmi_generar_codigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_generar_codigoActionPerformed(evt);
            }
        });
        jppm_menu1.add(jmi_generar_codigo);

        jd_agregar_clase.setTitle("AGREGAR CLASE");

        jLabel1.setText("AGREGAR CLASE");

        jLabel2.setText("Nombre ");

        jButton1.setText("AGREGAR");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        cb_visibilidad_clase_agregar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "private", "public", "package", "protected" }));

        jLabel27.setText("Encapsulamiento");

        javax.swing.GroupLayout jd_agregar_claseLayout = new javax.swing.GroupLayout(jd_agregar_clase.getContentPane());
        jd_agregar_clase.getContentPane().setLayout(jd_agregar_claseLayout);
        jd_agregar_claseLayout.setHorizontalGroup(
            jd_agregar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_agregar_claseLayout.createSequentialGroup()
                .addGroup(jd_agregar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_agregar_claseLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2))
                    .addGroup(jd_agregar_claseLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jd_agregar_claseLayout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(jLabel1))
                    .addGroup(jd_agregar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jd_agregar_claseLayout.createSequentialGroup()
                            .addGap(100, 100, 100)
                            .addComponent(cb_visibilidad_clase_agregar, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jd_agregar_claseLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jd_agregar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel27)
                                .addGroup(jd_agregar_claseLayout.createSequentialGroup()
                                    .addGap(90, 90, 90)
                                    .addComponent(tf_nombre_clase_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(120, Short.MAX_VALUE))
        );
        jd_agregar_claseLayout.setVerticalGroup(
            jd_agregar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_agregar_claseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(jd_agregar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tf_nombre_clase_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jd_agregar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(cb_visibilidad_clase_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jd_agregar_atributos.setTitle("AGREGAR ATRIBUTO");

        jLabel3.setText("AGREGAR ATRIBUTO");

        jLabel5.setText("Nombre");

        jLabel6.setText("Tipo");

        jLabel7.setText("Encapsulamiento");

        cb_tipo_atributo_agregar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "int", "String", "double", "long", "char", "byte", "ArrayList", " ", " " }));

        cb_visibilidad_atributo_agregar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "private", "public", "package", "protected" }));

        jButton2.setText("AGREGAR ATRIBUTO");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("FINALIZAR");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_agregar_atributosLayout = new javax.swing.GroupLayout(jd_agregar_atributos.getContentPane());
        jd_agregar_atributos.getContentPane().setLayout(jd_agregar_atributosLayout);
        jd_agregar_atributosLayout.setHorizontalGroup(
            jd_agregar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_agregar_atributosLayout.createSequentialGroup()
                .addGroup(jd_agregar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_agregar_atributosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jd_agregar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(jd_agregar_atributosLayout.createSequentialGroup()
                                .addGroup(jd_agregar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(53, 53, 53)
                                .addGroup(jd_agregar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cb_tipo_atributo_agregar, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tf_nombre_atributo_agregar, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cb_visibilidad_atributo_agregar, javax.swing.GroupLayout.Alignment.LEADING, 0, 115, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jd_agregar_atributosLayout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jd_agregar_atributosLayout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel3)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jd_agregar_atributosLayout.setVerticalGroup(
            jd_agregar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_agregar_atributosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(jd_agregar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tf_nombre_atributo_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jd_agregar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cb_tipo_atributo_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jd_agregar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cb_visibilidad_atributo_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jLabel4.setText("AGREGAR METODO");

        jLabel8.setText("Metodo");

        ta_metodo_agregar.setColumns(20);
        ta_metodo_agregar.setRows(5);
        jScrollPane3.setViewportView(ta_metodo_agregar);

        jButton4.setText("AGREGAR");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jLabel9.setText("Escribe en el area de texto el metodo que deseas agregar a la clase");

        jLabel10.setText("Nombre");

        jLabel11.setText("Ejemplo: Suma, Divisor, Visible, etc.");

        javax.swing.GroupLayout jd_agregar_metodosLayout = new javax.swing.GroupLayout(jd_agregar_metodos.getContentPane());
        jd_agregar_metodos.getContentPane().setLayout(jd_agregar_metodosLayout);
        jd_agregar_metodosLayout.setHorizontalGroup(
            jd_agregar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_agregar_metodosLayout.createSequentialGroup()
                .addGroup(jd_agregar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_agregar_metodosLayout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jd_agregar_metodosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addGroup(jd_agregar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jd_agregar_metodosLayout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(jLabel4))
                    .addGroup(jd_agregar_metodosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jd_agregar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(tf_nombre_metodo_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jd_agregar_metodosLayout.setVerticalGroup(
            jd_agregar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_agregar_metodosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(40, 40, 40)
                .addGroup(jd_agregar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(tf_nombre_metodo_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jd_agregar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_agregar_metodosLayout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel8))
                    .addGroup(jd_agregar_metodosLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel12.setText("MODIFICAR CLASE");

        jLabel13.setText("Nombre");

        jButton5.setText("MODIFICAR");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        cb_visibilidad_clase_modificar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "private", "public", "package", "protected" }));

        jLabel28.setText("Encapsulamiento");

        javax.swing.GroupLayout jd_modificar_claseLayout = new javax.swing.GroupLayout(jd_modificar_clase.getContentPane());
        jd_modificar_clase.getContentPane().setLayout(jd_modificar_claseLayout);
        jd_modificar_claseLayout.setHorizontalGroup(
            jd_modificar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_modificar_claseLayout.createSequentialGroup()
                .addGroup(jd_modificar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cb_visibilidad_clase_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jd_modificar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jd_modificar_claseLayout.createSequentialGroup()
                            .addGap(148, 148, 148)
                            .addComponent(jLabel12))
                        .addGroup(jd_modificar_claseLayout.createSequentialGroup()
                            .addGap(74, 74, 74)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jd_modificar_claseLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jd_modificar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel28)
                                .addGroup(jd_modificar_claseLayout.createSequentialGroup()
                                    .addComponent(jLabel13)
                                    .addGap(53, 53, 53)
                                    .addComponent(tf_nombre_clase_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        jd_modificar_claseLayout.setVerticalGroup(
            jd_modificar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_modificar_claseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(50, 50, 50)
                .addGroup(jd_modificar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(tf_nombre_clase_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jd_modificar_claseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(cb_visibilidad_clase_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        jd_modificar_atributos.setTitle("MODIFICAR ATRIBUTOS");

        jButton6.setText("MODIFICAR");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        cb_visibilidad_atributo_modificar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "private", "public", "package", "protected" }));

        jLabel14.setText("Encapsulamiento");

        jLabel15.setText("Tipo");

        jLabel16.setText("Nombre");

        cb_tipo_atributo_modificar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "int", "String", "double", "long", "char", "byte", "ArrayList", " ", " " }));

        jLabel17.setText("MODIFICAR ATRIBUTO");

        javax.swing.GroupLayout jd_modificar_atributosLayout = new javax.swing.GroupLayout(jd_modificar_atributos.getContentPane());
        jd_modificar_atributos.getContentPane().setLayout(jd_modificar_atributosLayout);
        jd_modificar_atributosLayout.setHorizontalGroup(
            jd_modificar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_modificar_atributosLayout.createSequentialGroup()
                .addContainerGap(98, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
            .addGroup(jd_modificar_atributosLayout.createSequentialGroup()
                .addGroup(jd_modificar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_modificar_atributosLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jd_modificar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addGroup(jd_modificar_atributosLayout.createSequentialGroup()
                                .addGroup(jd_modificar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel15))
                                .addGap(53, 53, 53)
                                .addGroup(jd_modificar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cb_tipo_atributo_modificar, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tf_nombre_atributo_modificar, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cb_visibilidad_atributo_modificar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jd_modificar_atributosLayout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jd_modificar_atributosLayout.setVerticalGroup(
            jd_modificar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_modificar_atributosLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jd_modificar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(tf_nombre_atributo_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jd_modificar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(cb_tipo_atributo_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jd_modificar_atributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(cb_visibilidad_atributo_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );

        jd_modificar_metodos.setTitle("MODIFICAR METODOS");

        jLabel18.setText("MODIFICAR METODO");

        jLabel19.setText("Nombre");

        jLabel20.setText("Ejemplo: Suma, Divisor, Visible, etc.");

        ta_metodo_modificar.setColumns(20);
        ta_metodo_modificar.setRows(5);
        jScrollPane4.setViewportView(ta_metodo_modificar);

        jLabel21.setText("Escribe en el area de texto el metodo que deseas agregar a la clase");

        jLabel22.setText("Metodo");

        jButton8.setText("MODIFICAR");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_modificar_metodosLayout = new javax.swing.GroupLayout(jd_modificar_metodos.getContentPane());
        jd_modificar_metodos.getContentPane().setLayout(jd_modificar_metodosLayout);
        jd_modificar_metodosLayout.setHorizontalGroup(
            jd_modificar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_modificar_metodosLayout.createSequentialGroup()
                .addGroup(jd_modificar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_modificar_metodosLayout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jd_modificar_metodosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel22)
                        .addGap(18, 18, 18)
                        .addGroup(jd_modificar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jd_modificar_metodosLayout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(jLabel18))
                    .addGroup(jd_modificar_metodosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jd_modificar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(tf_nombre_metodo_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jd_modificar_metodosLayout.setVerticalGroup(
            jd_modificar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_modificar_metodosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addGap(40, 40, 40)
                .addGroup(jd_modificar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(tf_nombre_metodo_modificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jd_modificar_metodosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_modificar_metodosLayout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel22))
                    .addGroup(jd_modificar_metodosLayout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel23.setText("AGREGAR INTEFAZ");

        jButton9.setText("AGREGAR");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton9MouseClicked(evt);
            }
        });

        jLabel25.setText("Nombre interfaz");

        javax.swing.GroupLayout jd_agregar_interfazLayout = new javax.swing.GroupLayout(jd_agregar_interfaz.getContentPane());
        jd_agregar_interfaz.getContentPane().setLayout(jd_agregar_interfazLayout);
        jd_agregar_interfazLayout.setHorizontalGroup(
            jd_agregar_interfazLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_agregar_interfazLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jd_agregar_interfazLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_agregar_interfazLayout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jLabel23))
                    .addGroup(jd_agregar_interfazLayout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tf_nombre_interfaz_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_agregar_interfazLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );
        jd_agregar_interfazLayout.setVerticalGroup(
            jd_agregar_interfazLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_agregar_interfazLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addGap(55, 55, 55)
                .addGroup(jd_agregar_interfazLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(tf_nombre_interfaz_agregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        jLabel29.setText("IMPLEMENTAR INTERFAZ");

        jLabel30.setText("Interfaces");

        jButton10.setText("IMPLEMENTAR");
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton10MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_implementar_interfazLayout = new javax.swing.GroupLayout(jd_implementar_interfaz.getContentPane());
        jd_implementar_interfaz.getContentPane().setLayout(jd_implementar_interfazLayout);
        jd_implementar_interfazLayout.setHorizontalGroup(
            jd_implementar_interfazLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_implementar_interfazLayout.createSequentialGroup()
                .addGroup(jd_implementar_interfazLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_implementar_interfazLayout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel29))
                    .addGroup(jd_implementar_interfazLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel30)
                        .addGroup(jd_implementar_interfazLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jd_implementar_interfazLayout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jd_implementar_interfazLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(cb_interfaces_implementar, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(101, Short.MAX_VALUE))
        );
        jd_implementar_interfazLayout.setVerticalGroup(
            jd_implementar_interfazLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_implementar_interfazLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel29)
                .addGap(43, 43, 43)
                .addGroup(jd_implementar_interfazLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(cb_interfaces_implementar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        Ver_codigo.setText("Ver codigo");
        Ver_codigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ver_codigoActionPerformed(evt);
            }
        });
        Menu2.add(Ver_codigo);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PROYECTO FINAL");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Proyecto");
        jt_diagrama.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jt_diagrama.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_diagramaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jt_diagrama);

        jButton11.setText("GUARDAR");
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton11MouseClicked(evt);
            }
        });

        jButton12.setText("CARGAR");
        jButton12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton12MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("UML", jPanel1);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Base de datos");
        jt_base_de_datos.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jt_base_de_datos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_base_de_datosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jt_base_de_datos);

        ta_comando_base_de_datos.setColumns(20);
        ta_comando_base_de_datos.setRows(5);
        jScrollPane5.setViewportView(ta_comando_base_de_datos);

        jButton7.setText("EJECUTAR");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane2))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(205, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Base de datos", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jt_diagramaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_diagramaMouseClicked
        // TODO add your handling code here:
        if (evt.isMetaDown()) {
            int Row = jt_diagrama.getClosestRowForLocation(evt.getX(), evt.getY());
            jt_diagrama.setSelectionRow(Row);

            Object Temp1 = jt_diagrama.getSelectionPath().getLastPathComponent();
            nodo_seleccionado = (DefaultMutableTreeNode) Temp1;

            jppm_menu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jt_diagramaMouseClicked

    private void jmi_agregar_claseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_agregar_claseActionPerformed
        // TODO add your handling code here:
        if (nodo_seleccionado.getUserObject() instanceof Atributos == false
                && nodo_seleccionado.getUserObject() instanceof Metodos == false
                && nodo_seleccionado.getUserObject() instanceof Interfaces == false) {

            jd_agregar_clase.setModal(true);
            jd_agregar_clase.pack();
            jd_agregar_clase.setLocationRelativeTo(this);
            jd_agregar_clase.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una clase",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jmi_agregar_claseActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        String Nombre, PerteneceA, Interfaz_implementada = "", Encapsulamiento, Abstract = "";

        Nombre = tf_nombre_clase_agregar.getText();
        Encapsulamiento = cb_visibilidad_clase_agregar.getSelectedItem().toString();

        DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_diagrama.getModel();

        if (nodo_seleccionado.getUserObject() instanceof Clases && nodo_seleccionado.isRoot() == true) {//clase hija
            PerteneceA = Nombre;

            DefaultMutableTreeNode Clase1 = new DefaultMutableTreeNode(new Clases(Nombre, PerteneceA, Interfaz_implementada, Encapsulamiento, Abstract));

            for (int i = 0; i < Clases.size(); i++) {
                if (PerteneceA.equals(Clases.get(i).getNombre())) {
                    Clases.get(i).getClases_hijas().add(new Clases(Nombre, PerteneceA, Interfaz_implementada, Encapsulamiento, Abstract));//agregar a arrayList de clase padre
                }
            }

            Clases.add(new Clases(Nombre, PerteneceA, Interfaz_implementada, Encapsulamiento, Abstract));
            nodo_seleccionado.add(Clase1);//agregar a arbol
            modeloARBOL.reload();

            jd_agregar_clase.dispose();

            tf_nombre_clase_agregar.setText("");

            JOptionPane.showMessageDialog(this, "Clase creada exitosamente",
                    "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
        } else {//clase padre
            PerteneceA = ((Clases) nodo_seleccionado.getUserObject()).getNombre();

            DefaultMutableTreeNode Clase1 = new DefaultMutableTreeNode(new Clases(Nombre, PerteneceA, Interfaz_implementada, Encapsulamiento, Abstract));
            Clases.add(new Clases(Nombre, PerteneceA, Interfaz_implementada, Encapsulamiento, Abstract));//agregar a arraylist

            nodo_seleccionado.add(Clase1);//agregar a arbol
            modeloARBOL.reload();

            jd_agregar_clase.dispose();

            tf_nombre_clase_agregar.setText("");

            JOptionPane.showMessageDialog(this, "Clase creada exitosamente",
                    "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jButton1MouseClicked

    private void jmi_agregar_atributoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_agregar_atributoActionPerformed
        // TODO add your handling code here:
        if (nodo_seleccionado.getUserObject() instanceof Clases == true && nodo_seleccionado.isRoot() == false) {
            jd_agregar_atributos.setModal(true);
            jd_agregar_atributos.pack();
            jd_agregar_atributos.setLocationRelativeTo(this);
            jd_agregar_atributos.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una clase",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jmi_agregar_atributoActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        String Nombre, Tipo, Encapsulamiento, Referencia_clase;

        Nombre = tf_nombre_atributo_agregar.getText();
        Tipo = cb_tipo_atributo_agregar.getSelectedItem().toString();
        Encapsulamiento = cb_visibilidad_atributo_agregar.getSelectedItem().toString();
        Referencia_clase = ((Clases) nodo_seleccionado.getUserObject()).getNombre();

        DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_diagrama.getModel();
        DefaultMutableTreeNode Atributo1 = new DefaultMutableTreeNode(new Atributos(Nombre, Encapsulamiento, Tipo, Referencia_clase));
        nodo_seleccionado.add(Atributo1);//agregar a arbol
        modeloARBOL.reload();

        String Nombre_temp = ((Clases) nodo_seleccionado.getUserObject()).getNombre();
        for (int i = 0; i < Clases.size(); i++) {
            if (Nombre_temp.equals(Clases.get(i).getNombre())) {
                Clases.get(i).getAtributos().add(new Atributos(Nombre, Encapsulamiento, Tipo, Referencia_clase));
            }
        }

        tf_nombre_atributo_agregar.setText("");

    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here

        jd_agregar_atributos.dispose();
        JOptionPane.showMessageDialog(this, "Agregaste exitosamente los atributos",
                "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton3MouseClicked

    private void jmi_agregar_metodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_agregar_metodoActionPerformed
        // TODO add your handling code here:
        if ((nodo_seleccionado.getUserObject() instanceof Clases == true
                || nodo_seleccionado.getUserObject() instanceof Interfaces == true)
                && nodo_seleccionado.isRoot() == false) {
            jd_agregar_metodos.setModal(true);
            jd_agregar_metodos.pack();
            jd_agregar_metodos.setLocationRelativeTo(this);
            jd_agregar_metodos.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una clase",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jmi_agregar_metodoActionPerformed

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
        if (nodo_seleccionado.getUserObject() instanceof Clases) {
            String Metodo, Nombre, Referencia_clase, Referencia_interfaz = "";

            Metodo = ta_metodo_agregar.getText();
            Nombre = tf_nombre_metodo_agregar.getText();
            Referencia_clase = ((Clases) nodo_seleccionado.getUserObject()).getNombre();

            if ((Metodo.contains("abstract")) && !(nodo_seleccionado.getUserObject().toString().contains("abstract"))) {
                JOptionPane.showMessageDialog(this, "Antes de hacer un metodo abstracto, haz tu clase abstracta",
                        "ERROR", JOptionPane.ERROR_MESSAGE);
            } else if ((Metodo.contains("abstract")) && (nodo_seleccionado.getUserObject().toString().contains("abstract"))) {
                DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_diagrama.getModel();
                DefaultMutableTreeNode Metodo1 = new DefaultMutableTreeNode(new Metodos(Metodo, Nombre, Referencia_clase, Referencia_interfaz));

                Metodos metodo_padres = new Metodos(Metodo, Nombre, Referencia_clase, Referencia_interfaz);
                String metodo_hijas = "";
                metodo_hijas += Metodo.substring(0, 6);
                metodo_hijas += Metodo.substring(15);
                Metodos metodo_hija = new Metodos(metodo_hijas, Nombre, Referencia_clase, Referencia_interfaz);

                Metodos_abstractos_a_clases(nodo_seleccionado, metodo_padres, metodo_hija);
                modeloARBOL.reload();
                Contador_abs = 0;

                String Nombre_temp = ((Clases) nodo_seleccionado.getUserObject()).getNombre();
                for (int i = 0; i < Clases.size(); i++) {
                    if (Nombre_temp.equals(Clases.get(i).getNombre())) {
                        Clases.get(i).getMetodos().add(new Metodos(Metodo, Nombre, Referencia_clase, Referencia_interfaz));
                    }
                }

                ta_metodo_agregar.setText("");
                tf_nombre_metodo_agregar.setText("");

                jd_agregar_metodos.dispose();

                JOptionPane.showMessageDialog(this, "Metodo agregado exitosamente");
            } else {
                DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_diagrama.getModel();
                DefaultMutableTreeNode Metodo1 = new DefaultMutableTreeNode(new Metodos(Metodo, Nombre, Referencia_clase, Referencia_interfaz));

                nodo_seleccionado.add(Metodo1);//agregar a arbol
                modeloARBOL.reload();

                String Nombre_temp = ((Clases) nodo_seleccionado.getUserObject()).getNombre();
                for (int i = 0; i < Clases.size(); i++) {
                    if (Nombre_temp.equals(Clases.get(i).getNombre())) {
                        Clases.get(i).getMetodos().add(new Metodos(Metodo, Nombre, Referencia_clase, Referencia_interfaz));
                    }
                }

                ta_metodo_agregar.setText("");
                tf_nombre_metodo_agregar.setText("");

                jd_agregar_metodos.dispose();

                JOptionPane.showMessageDialog(this, "Metodo agregado exitosamente");
            }

        } else if (nodo_seleccionado.getUserObject() instanceof Interfaces) {
            String Metodo, Nombre, Referencia_clase = "", Referencia_interfaz = "";

            Metodo = ta_metodo_agregar.getText();
            Nombre = tf_nombre_metodo_agregar.getText();
            Referencia_interfaz = ((Interfaces) nodo_seleccionado.getUserObject()).getNombre();

            DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_diagrama.getModel();
            DefaultMutableTreeNode Metodo1 = new DefaultMutableTreeNode(new Metodos(Metodo, Nombre, Referencia_clase, Referencia_interfaz));

            nodo_seleccionado.add(Metodo1);//agregar a arbol
            modeloARBOL.reload();

            String Nombre_temp = ((Interfaces) nodo_seleccionado.getUserObject()).getNombre();
            for (int i = 0; i < interfaces.size(); i++) {
                if (Nombre_temp.equals(interfaces.get(i).getNombre())) {
                    interfaces.get(i).getMetodos().add(new Metodos(Metodo, Nombre, Referencia_clase, Referencia_interfaz));
                }
            }

            ta_metodo_agregar.setText("");
            tf_nombre_metodo_agregar.setText("");

            jd_agregar_metodos.dispose();

            JOptionPane.showMessageDialog(this, "Metodo agregado exitosamente");
        }


    }//GEN-LAST:event_jButton4MouseClicked

    private void jmi_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_modificarActionPerformed
        // TODO add your handling code here:
        if (nodo_seleccionado.getUserObject() instanceof Clases && nodo_seleccionado.isRoot() == false) {
            jd_modificar_clase.setModal(true);
            jd_modificar_clase.pack();
            jd_modificar_clase.setLocationRelativeTo(this);
            jd_modificar_clase.setVisible(true);

        } else if (nodo_seleccionado.getUserObject() instanceof Atributos) {
            jd_modificar_atributos.setModal(true);
            jd_modificar_atributos.pack();
            jd_modificar_atributos.setLocationRelativeTo(this);
            jd_modificar_atributos.setVisible(true);

        } else if (nodo_seleccionado.getUserObject() instanceof Metodos) {
            jd_modificar_metodos.setModal(true);
            jd_modificar_metodos.pack();
            jd_modificar_metodos.setLocationRelativeTo(this);
            jd_modificar_metodos.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(this, "Selecciona un atributo, metodo o clase",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jmi_modificarActionPerformed

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        // TODO add your handling code here:
        String Nombre, Encapsulamiento, Tipo;

        Nombre = tf_nombre_atributo_modificar.getText();
        Encapsulamiento = cb_visibilidad_atributo_modificar.getSelectedItem().toString();
        Tipo = cb_tipo_atributo_modificar.getSelectedItem().toString();

        String Nombre_temp = ((Atributos) nodo_seleccionado.getUserObject()).getNombre();
        String Referencia_clase = ((Atributos) nodo_seleccionado.getUserObject()).getReferencia_clase();

        for (int i = 0; i < Clases.size(); i++) {
            if (Referencia_clase.equals(Clases.get(i).getNombre())) {
                for (int j = 0; j < Clases.get(i).getAtributos().size(); j++) {
                    if (Nombre_temp.equals(Clases.get(i).getAtributos().get(j).getNombre())) {
                        Clases.get(i).getAtributos().get(j).setNombre(Nombre);
                        Clases.get(i).getAtributos().get(j).setVisibilidad(Encapsulamiento);
                        Clases.get(i).getAtributos().get(j).setTipo(Tipo);
                    }
                }
            }
        }

        ((Atributos) nodo_seleccionado.getUserObject()).setNombre(Nombre);
        ((Atributos) nodo_seleccionado.getUserObject()).setVisibilidad(Encapsulamiento);
        ((Atributos) nodo_seleccionado.getUserObject()).setTipo(Tipo);

        jd_modificar_atributos.dispose();
        JOptionPane.showMessageDialog(this, "Atributo modificado exitosamente",
                "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseClicked
        // TODO add your handling code here:
        String Nombre, Metodo, Referencia_clase;

        Nombre = tf_nombre_metodo_modificar.getText();
        Metodo = ta_metodo_modificar.getText();
        Referencia_clase = ((Metodos) nodo_seleccionado.getUserObject()).getReferencia_clase();
        String Nombre_temp = ((Metodos) nodo_seleccionado.getUserObject()).getNombre();

        if (((Metodos) nodo_seleccionado.getUserObject()).getReferencia_interfaz().equals("")) {//si no es metodo de interfaz
            for (int i = 0; i < Clases.size(); i++) {
                if (Referencia_clase.equals(Clases.get(i).getNombre())) {
                    for (int j = 0; j < Clases.get(i).getMetodos().size(); j++) {
                        if (Clases.get(i).getMetodos().get(j).getNombre().equals(Nombre_temp)) {
                            Clases.get(i).getMetodos().get(j).setNombre(Nombre);
                            Clases.get(i).getMetodos().get(j).setMetodo(Metodo);
                        }
                    }
                }
            }

            ((Metodos) nodo_seleccionado.getUserObject()).setNombre(Nombre);
            ((Metodos) nodo_seleccionado.getUserObject()).setMetodo(Metodo);

            tf_nombre_metodo_modificar.setText("");
            ta_metodo_modificar.setText("");

            jd_modificar_metodos.dispose();
            JOptionPane.showMessageDialog(this, "Metodo modificado exitosamente",
                    "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (int i = 0; i < Clases.size(); i++) {
                if (Referencia_clase.equals(Clases.get(i).getNombre())) {
                    for (int j = 0; j < Clases.get(i).getMetodos().size(); j++) {
                        if (Clases.get(i).getMetodos().get(j).getNombre().equals(Nombre_temp)) {
                            Clases.get(i).getMetodos().get(j).setNombre(Nombre);
                            Clases.get(i).getMetodos().get(j).setMetodo(Metodo);
                        }
                    }
                }
            }

            for (int i = 0; i < interfaces.size(); i++) {
                if (Referencia_clase.equals(interfaces.get(i).getNombre())) {
                    for (int j = 0; j < interfaces.get(i).getMetodos().size(); j++) {
                        if (interfaces.get(i).getMetodos().get(j).getNombre().equals(Nombre_temp)) {
                            interfaces.get(i).getMetodos().get(j).setNombre(Nombre);
                            interfaces.get(i).getMetodos().get(j).setMetodo(Metodo);
                        }
                    }
                }
            }

            Modificar_metodos_interfaces(jt_diagrama, Nombre_temp, Nombre, Metodo);
            tf_nombre_metodo_modificar.setText("");
            ta_metodo_modificar.setText("");

            jd_modificar_metodos.dispose();
            JOptionPane.showMessageDialog(this, "Metodo modificado exitosamente",
                    "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_jButton8MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
        String Nombre, Nombre_temp, Encapsulamiento;

        Nombre = tf_nombre_clase_modificar.getText();
        Encapsulamiento = cb_visibilidad_clase_modificar.getSelectedItem().toString();

        Nombre_temp = ((Clases) nodo_seleccionado.getUserObject()).getNombre();

        for (int i = 0; i < Clases.size(); i++) {
            if (Clases.get(i).getNombre().equals(Nombre_temp)) {
                Clases.get(i).setNombre(Nombre);
                Clases.get(i).setEncapsulamiento(Encapsulamiento);
            }
        }

        for (int i = 0; i < Clases.size(); i++) {
            if (Clases.get(i).getNombre().equals(Nombre_temp)) {
                for (int j = 0; j < Clases.get(i).getClases_hijas().size(); j++) {
                    Clases.get(i).getClases_hijas().get(j).setPerteneceA(Nombre);
                }
            }
        }

        //metodo para cambiar nodos en el arbol.
        Nombre_clases(nodo_seleccionado, Nombre);
        ((Clases) nodo_seleccionado.getUserObject()).setEncapsulamiento(Encapsulamiento);

        jd_modificar_clase.dispose();
        JOptionPane.showMessageDialog(this, "Se modifico la clase exitosamente",
                "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
        Contador = 0;
    }//GEN-LAST:event_jButton5MouseClicked

    private void jmi_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_eliminarActionPerformed
        // TODO add your handling code here:
        if (nodo_seleccionado.getUserObject() instanceof Clases && nodo_seleccionado.isRoot() == false) {
            int Confirmacion = JOptionPane.showConfirmDialog(this,
                    "¿Seguro que deseas eliminar la clase?", "Confirmar",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (Confirmacion == JOptionPane.OK_OPTION) {
                DefaultTreeModel m = (DefaultTreeModel) jt_diagrama.getModel();
                m.removeNodeFromParent(nodo_seleccionado);
                m.reload();

                String Nombre_temp = ((Clases) nodo_seleccionado.getUserObject()).getNombre();
                for (int i = 0; i < Clases.size(); i++) {
                    if (Clases.get(i).getNombre().equals(Nombre_temp)) {
                        Clases.remove(i);
                    }
                }

                JOptionPane.showMessageDialog(this, "Clase eliminada exitosamente",
                        "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
            }

        } else if (nodo_seleccionado.getUserObject() instanceof Atributos) {
            int Confirmacion = JOptionPane.showConfirmDialog(this,
                    "¿Seguro que deseas eliminar el atributo?", "Confirmar",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (Confirmacion == JOptionPane.OK_OPTION) {
                DefaultTreeModel m = (DefaultTreeModel) jt_diagrama.getModel();
                m.removeNodeFromParent(nodo_seleccionado);
                m.reload();

                String Referencia_clase = ((Atributos) nodo_seleccionado.getUserObject()).getReferencia_clase();
                String Nombre_temp = ((Atributos) nodo_seleccionado.getUserObject()).getNombre();
                for (int i = 0; i < Clases.size(); i++) {
                    if (Clases.get(i).getNombre().equals(Referencia_clase)) {
                        for (int j = 0; j < Clases.get(i).getAtributos().size(); j++) {
                            if (Clases.get(i).getAtributos().get(j).getNombre().equals(Nombre_temp)) {
                                Clases.get(i).getAtributos().remove(j);
                            }
                        }
                    }
                }

                JOptionPane.showMessageDialog(this, "Atributo eliminado exitosamente",
                        "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
            }

        } else if (nodo_seleccionado.getUserObject() instanceof Metodos) {
            int Confirmacion = JOptionPane.showConfirmDialog(this,
                    "¿Seguro que deseas eliminar el metodo?", "Confirmar",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (Confirmacion == JOptionPane.OK_OPTION) {
                String Referencia_clase = ((Metodos) nodo_seleccionado.getUserObject()).getReferencia_clase();
                String Nombre_temp = ((Metodos) nodo_seleccionado.getUserObject()).getNombre();
                String Referencia_interfaz = ((Metodos) nodo_seleccionado.getUserObject()).getReferencia_interfaz();
                boolean Interfaz = false;

                if ((((DefaultMutableTreeNode) nodo_seleccionado.getParent()).toString()).contains("Interfaz")) {
                    Interfaz = true;
                }

                if (Interfaz == true) {
                    DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_diagrama.getModel();
                    Eliminar_metodos(jt_diagrama, Nombre_temp);

                    for (int i = 0; i < Clases.size(); i++) {
                        if (Clases.get(i).getNombre().equals(Referencia_clase)) {
                            for (int j = 0; j < Clases.get(i).getMetodos().size(); j++) {
                                if (Clases.get(i).getMetodos().get(j).getNombre().equals(Nombre_temp)) {
                                    Clases.get(i).getMetodos().remove(j);
                                }
                            }
                        }
                    }

                    for (int i = 0; i < interfaces.size(); i++) {
                        for (int j = 0; j < interfaces.get(i).getMetodos().size(); j++) {
                            if (interfaces.get(i).getMetodos().get(j).equals(Nombre_temp)) {
                                interfaces.get(i).getMetodos().remove(j);
                            }
                        }
                    }

                    JOptionPane.showMessageDialog(this, "Metodo eliminado exitosamente",
                            "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    DefaultTreeModel m = (DefaultTreeModel) jt_diagrama.getModel();
                    m.removeNodeFromParent(nodo_seleccionado);
                    m.reload();

                    for (int i = 0; i < Clases.size(); i++) {
                        if (Clases.get(i).getNombre().equals(Referencia_clase)) {
                            for (int j = 0; j < Clases.get(i).getMetodos().size(); j++) {
                                if (Clases.get(i).getMetodos().get(j).getNombre().equals(Nombre_temp)) {
                                    Clases.get(i).getMetodos().remove(j);
                                }
                            }
                        }
                    }

                }

            }
        } else if (nodo_seleccionado.getUserObject() instanceof Interfaces) {
            int Confirmacion = JOptionPane.showConfirmDialog(this,
                    "¿Seguro que deseas eliminar la interfaz?", "Confirmar",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (Confirmacion == JOptionPane.OK_OPTION) {
                String Nombre_interfaz = ((Interfaces) nodo_seleccionado.getUserObject()).getNombre();
                DefaultTreeModel m = (DefaultTreeModel) jt_diagrama.getModel();
                m.removeNodeFromParent(nodo_seleccionado);
                m.reload();

                for (int i = 0; i < interfaces.size(); i++) {
                    if (((Interfaces) nodo_seleccionado.getUserObject()).getNombre().equals(interfaces.get(i).getNombre())) {
                        interfaces.remove(i);
                    }
                }

                Eliminar_interfaces(jt_diagrama, Nombre_interfaz);

                cb_interfaces_implementar.removeAllItems();
                for (int i = 0; i < interfaces.size(); i++) {
                    cb_interfaces_implementar.addItem(interfaces.get(i));
                }

                JOptionPane.showMessageDialog(this, "Interfaz eliminado exitosamente",
                        "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
            }
        }

    }//GEN-LAST:event_jmi_eliminarActionPerformed

    private void jmi_agregar_interfazActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_agregar_interfazActionPerformed
        // TODO add your handling code here:
        if (nodo_seleccionado.getUserObject() instanceof Clases && nodo_seleccionado.isRoot() == false) {
            JOptionPane.showMessageDialog(this, "Solo puedes agregar interfaces desde la raiz",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (nodo_seleccionado.getUserObject() instanceof Atributos) {
            JOptionPane.showMessageDialog(this, "Solo puedes agregar interfaces desde la raiz",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (nodo_seleccionado.getUserObject() instanceof Metodos) {
            JOptionPane.showMessageDialog(this, "Solo puedes agregar interfaces desde la raiz",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (nodo_seleccionado.getUserObject() instanceof Interfaces) {
            JOptionPane.showMessageDialog(this, "Solo puedes agregar interfaces desde la raiz",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            jd_agregar_interfaz.setModal(true);
            jd_agregar_interfaz.pack();
            jd_agregar_interfaz.setLocationRelativeTo(this);
            jd_agregar_interfaz.setVisible(true);
        }
    }//GEN-LAST:event_jmi_agregar_interfazActionPerformed

    private void jButton9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseClicked
        // TODO add your handling code here:
        String Nombre_i, Nombre_m, Metodo;

        Nombre_i = this.tf_nombre_interfaz_agregar.getText();

        Interfaces p = new Interfaces(Nombre_i);
        DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_diagrama.getModel();
        DefaultMutableTreeNode Interfaz1 = new DefaultMutableTreeNode(p);

        nodo_seleccionado.add(Interfaz1);//agregar a arbol
        modeloARBOL.reload();
        cb_interfaces_implementar.addItem(p);
        interfaces.add(p);

        tf_nombre_interfaz_agregar.setText("");

        jd_agregar_interfaz.dispose();
        JOptionPane.showMessageDialog(this, "Interfaz agregada exitosamente",
                "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton9MouseClicked

    private void jmi_implementar_interfazActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_implementar_interfazActionPerformed
        // TODO add your handling code here:
        if (nodo_seleccionado.getUserObject() instanceof Clases && nodo_seleccionado.isRoot() == false) {
            jd_implementar_interfaz.setModal(true);
            jd_implementar_interfaz.pack();
            jd_implementar_interfaz.setLocationRelativeTo(this);
            jd_implementar_interfaz.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Solo puedes implementar inferfaces desde una clase",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jmi_implementar_interfazActionPerformed

    private void jButton10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MouseClicked
        // TODO add your handling code here:
        String Nombre = ((Interfaces) cb_interfaces_implementar.getSelectedItem()).getNombre();
        String Nombre_clase = ((Clases) nodo_seleccionado.getUserObject()).getNombre();
        DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_diagrama.getModel();

        ((Clases) nodo_seleccionado.getUserObject()).setInterfaz_implementada(Nombre);

        for (int i = 0; i < Clases.size(); i++) {
            if ((((Clases) nodo_seleccionado.getUserObject()).getNombre()).equals(Clases.get(i).getNombre())) {
                Clases.get(i).setInterfaz_implementada(Nombre);
            }
        }

        String Nombre_temp = ((Interfaces) cb_interfaces_implementar.getSelectedItem()).getNombre();
        for (int i = 0; i < interfaces.size(); i++) {
            if (Nombre_temp.equals(interfaces.get(i).getNombre())) {
                for (int j = 0; j < interfaces.get(i).getMetodos().size(); j++) {
                    for (int k = 0; k < Clases.size(); k++) {
                        if (Nombre_clase.equals(Clases.get(k).getNombre())) {
                            Clases.get(k).getMetodos().add(interfaces.get(i).getMetodos().get(j));
                        }
                    }
                    DefaultMutableTreeNode Metodo1 = new DefaultMutableTreeNode(interfaces.get(i).getMetodos().get(j));
                    Metodos_a_clases(nodo_seleccionado, interfaces.get(i).getMetodos().get(j));
                    modeloARBOL.reload();
                }
            }
        }

        for (int i = 0; i < Clases.size(); i++) {
            if (Nombre_clase.equals(Clases.get(i).getNombre())) {
                for (int j = 0; j < Clases.get(i).getMetodos().size(); j++) {
                    Clases.get(i).getMetodos().get(j).setReferencia_clase(Nombre_clase);
                }
            }

        }

        jd_implementar_interfaz.dispose();
        JOptionPane.showMessageDialog(this, "Has implementado la interfaz exitosamente",
                "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_jButton10MouseClicked

    private void jmi_hacer_abstractaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_hacer_abstractaActionPerformed
        // TODO add your handling code here:
        if (nodo_seleccionado.getUserObject() instanceof Clases && nodo_seleccionado.isRoot() == false) {
            ((Clases) nodo_seleccionado.getUserObject()).setAbstract("abstract");
            String Nombre_clase = ((Clases) nodo_seleccionado.getUserObject()).getNombre();
            DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_diagrama.getModel();

            for (int i = 0; i < Clases.size(); i++) {
                if (Clases.get(i).getNombre().equals(Nombre_clase)) {
                    Clases.get(i).setAbstract("abstract");
                }
            }
            modeloARBOL.reload();
        } else {
            JOptionPane.showMessageDialog(this, "Elije una clase", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jmi_hacer_abstractaActionPerformed

    private void jmi_deshacer_abstractaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_deshacer_abstractaActionPerformed
        // TODO add your handling code here:
        if ((nodo_seleccionado.getUserObject().toString().contains("abstract"))
                && nodo_seleccionado.getUserObject() instanceof Clases
                && nodo_seleccionado.isRoot() == false) {

            //cambiar el tostring
            ((Clases) nodo_seleccionado.getUserObject()).setAbstract("");

            //borrar metodos abstract de las clases en array y arbol
            Eliminar_metodos_abstractos(nodo_seleccionado);
            for (int i = 0; i < Clases.size(); i++) {
                if (Clases.get(i).getNombre().equals(((Clases) nodo_seleccionado.getUserObject()).getNombre())) {
                    for (int j = 0; j < Clases.get(i).getMetodos().size(); j++) {
                        if (Clases.get(i).getMetodos().get(j).equals(Nombre_metodo_ab)) {
                            Clases.get(i).getMetodos().remove(j);
                        }
                    }
                }
            }

            Nombre_metodo_ab = "";
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una clase",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jmi_deshacer_abstractaActionPerformed

    private void jmi_generar_codigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_generar_codigoActionPerformed
        // TODO add your handling code here:
        if (nodo_seleccionado.getUserObject() instanceof Clases && (!nodo_seleccionado.getUserObject().toString().contains("Interfaz"))) {
            Generar_codigo2(nodo_seleccionado);

            JOptionPane.showMessageDialog(this, "Se han generado las clases de forma exitosa",
                    "OPERACION EXITOSA", JOptionPane.INFORMATION_MESSAGE);
        }

        File Archivo2 = null;
        FileWriter FW2 = null;
        BufferedWriter BW2 = null;
        String Interfaces_generar = "";
        for (int i = 0; i < interfaces.size(); i++) {
            String Nombre_temp = interfaces.get(i).getNombre();

            Interfaces_generar += "public interface " + Nombre_temp + " {" + "\r\n" + "\r\n";
            for (int j = 0; j < interfaces.get(i).getMetodos().size(); j++) {
                Interfaces_generar += interfaces.get(i).getMetodos().get(j) + "\r\n" + "\r\n";
            }
            Interfaces_generar += "}";
            try {

                Archivo2 = new File("./" + Nombre_temp + ".txt");
                FW2 = new FileWriter(Archivo2, true);
                BW2 = new BufferedWriter(FW2);
                BW2.write(Interfaces_generar);
                BW2.flush();//hace un vaciado del RAM al ROM
            } catch (Exception e) {

            }
            try {
                BW2.close();
                FW2.close();
            } catch (IOException e) {

            }
        }


    }//GEN-LAST:event_jmi_generar_codigoActionPerformed

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        // TODO add your handling code here:
        String Revisar = ta_comando_base_de_datos.getText();

        //Create table t1 (int x, String y)
        if ((Revisar.contains("Create") || Revisar.contains("create")) && (Revisar.contains("Table")
                || Revisar.contains("table")) && ((Revisar.contains("int")) || (Revisar.contains("boolean"))
                || Revisar.contains("String"))) {
            int Parentesis1 = 0;

            for (int i = 0; i < Revisar.length() - 1; i++) {
                if (Revisar.charAt(i) == '(') {
                    Parentesis1 = i;
                }
            }

            String Codigo = Revisar;
            String Nombre_tabla = Revisar.substring(13, Parentesis1);
            Tablas p = new Tablas(Nombre_tabla, Codigo);
            tablas.add(p);

            String Variables_cortar = Revisar.substring(Parentesis1 + 1, Revisar.length() - 1);

            String[] Variables = Variables_cortar.split(", ");

            for (int i = 0; i < Variables.length; i++) {
                tablas.get(tablas.size() - 1).getCampos().add(new Campos(Variables[i], Nombre_tabla));
            }

            DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_base_de_datos.getModel();
            DefaultMutableTreeNode nodo_temp = (DefaultMutableTreeNode) modeloARBOL.getRoot();
            DefaultMutableTreeNode Tabla1 = new DefaultMutableTreeNode(p);

            for (int i = 0; i < Variables.length; i++) {
                DefaultMutableTreeNode Campo1 = new DefaultMutableTreeNode(new Campos(Variables[i], Nombre_tabla));
                Tabla1.add(Campo1);
            }

            nodo_temp.add(Tabla1);
            modeloARBOL.reload();
            ta_comando_base_de_datos.setText("");

        } else if ((Revisar.contains("Alter") || Revisar.contains("alter")) && (Revisar.contains("Table")
                || Revisar.contains("table")) && (Revisar.contains("add") || Revisar.contains("Add"))
                && (Revisar.contains("Column") || Revisar.contains("column")) && ((Revisar.contains("int"))
                || (Revisar.contains("boolean")) || Revisar.contains("String"))) {
            int Parentesis1 = 0;

            Revisar = Revisar.substring(12);

            String[] temp_nombre = Revisar.split(" ");
            String Nombre_tabla = temp_nombre[0];

            for (int i = 0; i < Revisar.length() - 1; i++) {
                if (Revisar.charAt(i) == '(') {
                    Parentesis1 = i;
                }
            }

            String Variables_cortar = Revisar.substring(Parentesis1 + 1, Revisar.length() - 1);

            String[] Variables = Variables_cortar.split(",");
            for (int i = 0; i < tablas.size(); i++) {
                if (tablas.get(i).getNombre().equals(Nombre_tabla)) {
                    for (int j = 0; j < Variables.length; j++) {
                        tablas.get(i).getCampos().add(new Campos(Variables[j], Nombre_tabla));
                    }
                }
            }

            Campos_a_tablas(jt_base_de_datos, Nombre_tabla, Variables);
            ta_comando_base_de_datos.setText("");
            //Alter table t1 add column(int cc4, int cc5)

        } else if ((Revisar.contains("Alter") || Revisar.contains("alter")) && (Revisar.contains("Table")
                || Revisar.contains("table")) && (Revisar.contains("drop") || Revisar.contains("Drop"))
                && (Revisar.contains("Column") || Revisar.contains("column"))) {

            int Parentesis1 = 0;

            Revisar = Revisar.substring(12);

            String[] temp_nombre = Revisar.split(" ");
            String Nombre_tabla = temp_nombre[0];

            for (int i = 0; i < Revisar.length() - 1; i++) {
                if (Revisar.charAt(i) == '(') {
                    Parentesis1 = i;
                }
            }

            String Variables_cortar = Revisar.substring(Parentesis1 + 1, Revisar.length() - 1);

            String[] Variables = Variables_cortar.split(",");
            for (int i = 0; i < Variables.length; i++) {
                Variables[i] = Variables[i].replaceAll(" ", "");
            }

            for (int i = 0; i < tablas.size(); i++) {
                if (tablas.get(i).getNombre().equals(Nombre_tabla)) {
                    for (int j = 0; j < tablas.get(i).getCampos().size(); j++) {
                        for (int k = 0; k < Variables.length; k++) {
                            if (tablas.get(i).getCampos().get(j).equals(Variables[k])) {
                                tablas.get(i).getCampos().remove(j);
                            }
                        }
                    }
                }
            }

            for (int i = 0; i < Variables.length; i++) {
                Eliminar_campos(jt_base_de_datos, Nombre_tabla, Variables);
            }

            ta_comando_base_de_datos.setText("");
            //Alter table t1 drop column(x, y)
        } else if ((Revisar.contains("Alter") || Revisar.contains("alter"))
                && (Revisar.contains("Table") || Revisar.contains("table"))
                && (Revisar.contains("add") || Revisar.contains("Add"))
                && (Revisar.contains("Primary") || Revisar.contains("primary"))
                && (Revisar.contains("Key") || Revisar.contains("key"))) {

            int Parentesis1 = 0;
            String Codigo = Revisar;
            Revisar = Revisar.substring(12);

            String[] temp_nombre = Revisar.split(" ");
            String Nombre_tabla = temp_nombre[0];

            for (int i = 0; i < Revisar.length() - 1; i++) {
                if (Revisar.charAt(i) == '(') {
                    Parentesis1 = i;
                }
            }
            String Nombre_llave = Revisar.substring(19, Parentesis1);
            String Variables_cortar = Revisar.substring(Parentesis1 + 1, Revisar.length() - 1);
            String[] Variables = Variables_cortar.split(",");

            ArrayList temp3 = new ArrayList();

            int contador_variables = 0;
            for (int i = 0; i < tablas.size(); i++) {
                if (tablas.get(i).getNombre().equals(Nombre_tabla)) {
                    for (int j = 0; j < tablas.get(i).getCampos().size(); j++) {
                        for (int k = 0; k < Variables.length; k++) {
                            if (tablas.get(i).getCampos().get(j).getNombre().contains(Variables[k])) {
                                temp3.add(tablas.get(i).getCampos().get(j));
                                contador_variables++;
                            }
                        }
                    }
                }
            }

            for (int i = 0; i < temp3.size(); i++) {
                primarias.add(temp3.get(i));
            }

            for (int i = 0; i < Variables.length; i++) {
                Variables[i] = Variables[i].replaceAll(" ", "");
            }

            for (int i = 0; i < Variables.length; i++) {
                Eliminar_campos(jt_base_de_datos, Nombre_tabla, Variables);
            }

            DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_base_de_datos.getModel();
            DefaultMutableTreeNode nodo_temp = (DefaultMutableTreeNode) modeloARBOL.getRoot();
            DefaultMutableTreeNode llave = new DefaultMutableTreeNode(new Llave_primaria("Primary key", Codigo));

            for (int i = 0; i < temp3.size(); i++) {
                DefaultMutableTreeNode campo_temp = new DefaultMutableTreeNode(temp3.get(i));
                llave.add(campo_temp);
            }

            if (contador_variables == Variables.length) {
                for (int i = 0; i < nodo_temp.getChildCount(); i++) {
                    if (nodo_temp.getChildAt(i).toString().contains(Nombre_tabla)) {
                        ((DefaultMutableTreeNode) nodo_temp.getChildAt(i)).add(llave);
                    }
                }
            }

            ta_comando_base_de_datos.setText("");
            //Alter table t1 add primary key nombre_de_la_primary_key(x, y)
        } else if (((Revisar.contains("drop")) || Revisar.contains("Drop"))
                && ((Revisar.contains("table")) || Revisar.contains("Table"))) {

            int Parentesis1 = 0;

            for (int i = 0; i < Revisar.length() - 1; i++) {
                if (Revisar.charAt(i) == '(') {
                    Parentesis1 = i;
                }
            }

            String Nombre_tabla = Revisar.substring(Parentesis1 + 1, Revisar.length() - 1);
            DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_base_de_datos.getModel();
            DefaultMutableTreeNode nodo_temp = (DefaultMutableTreeNode) modeloARBOL.getRoot();

            for (int i = 0; i < nodo_temp.getChildCount(); i++) {
                if (nodo_temp.getChildAt(i).toString().contains(Nombre_tabla)) {
                    modeloARBOL.removeNodeFromParent((DefaultMutableTreeNode) nodo_temp.getChildAt(i));
                    modeloARBOL.reload();
                }
            }
            ta_comando_base_de_datos.setText("");

            //drop table(t3)
        } else if (((Revisar.contains("Alter")) || (Revisar.contains("alter")))
                && ((Revisar.contains("table")) || (Revisar.contains("Table")))
                && ((Revisar.contains("Add")) || (Revisar.contains("add")))
                && ((Revisar.contains("Key")) || (Revisar.contains("key")))
                && ((Revisar.contains("From")) || Revisar.contains("from"))
                && ((Revisar.contains("Foreign")) || (Revisar.contains("foreign")))) {
            int Parentesis1 = 0;
            String Codigo = Revisar;
            Revisar = Revisar.substring(12);
            String[] temp_nombre1 = Revisar.split(" ");
            String Nombre_tabla1 = temp_nombre1[0];

            Revisar = Revisar.replaceAll(Nombre_tabla1, "");
            Revisar = Revisar.replaceFirst(" ", "");
            Revisar = Revisar.substring(21, Revisar.length() - 1);

            for (int i = 0; i < Revisar.length() - 1; i++) {
                if (Revisar.charAt(i) == '(') {
                    Parentesis1 = i;
                }
            }

            String Nombre_tabla2 = Revisar.substring(0, Parentesis1);
            String Variable = Revisar.substring(Parentesis1 + 1, Revisar.length() - 1);
            String[] Variables = Variable.split(",");
            String Variable1 = Variables[0];
            String Variable2 = Variables[1];

            DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_base_de_datos.getModel();
            DefaultMutableTreeNode nodo_temp = (DefaultMutableTreeNode) modeloARBOL.getRoot();

            DefaultMutableTreeNode llave_f = new DefaultMutableTreeNode(new Llave_foranea("Llave foranea", Codigo));
            llave_f.add(new DefaultMutableTreeNode(new Campos(Variable1, "")));

            for (int i = 0; i < nodo_temp.getChildCount(); i++) {
                if (nodo_temp.getChildAt(i).toString().contains(Nombre_tabla1)) {
                    ((DefaultMutableTreeNode) nodo_temp.getChildAt(i)).add(llave_f);
                }
            }
            modeloARBOL.reload();

            ta_comando_base_de_datos.setText("");
            /*Alter table Clientes Add Foreign Key from Cliente(Last_Name,Last_Name);
             lo de los parentesis es, el primero, el campo de la tabla, 
             y el otro, el campo de la otra table de referencia*/
        }
        //ta_comandp == comando a revisar sobre que hacer en base de datos.
    }//GEN-LAST:event_jButton7MouseClicked

    private void jt_base_de_datosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_base_de_datosMouseClicked
        // TODO add your handling code here:
        if (evt.isMetaDown()) {
            int Row = jt_base_de_datos.getClosestRowForLocation(evt.getX(), evt.getY());
            jt_base_de_datos.setSelectionRow(Row);

            Object Temp1 = jt_base_de_datos.getSelectionPath().getLastPathComponent();
            nodo_seleccionado_base_de_datos = (DefaultMutableTreeNode) Temp1;

            if (nodo_seleccionado_base_de_datos.getUserObject() instanceof Tablas
                    || nodo_seleccionado_base_de_datos.getUserObject() instanceof Llave_primaria
                    || nodo_seleccionado_base_de_datos.getUserObject() instanceof Llave_foranea) {

                Menu2.show(evt.getComponent(), evt.getX(), evt.getY());
            }

        }
    }//GEN-LAST:event_jt_base_de_datosMouseClicked

    private void Ver_codigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ver_codigoActionPerformed
        // TODO add your handling code here:
        if (nodo_seleccionado_base_de_datos.getUserObject() instanceof Tablas) {
            String Codigo = ((Tablas) nodo_seleccionado_base_de_datos.getUserObject()).getCodigo();

            ta_comando_base_de_datos.setText(Codigo);

            File Archivo2 = null;
            FileWriter FW2 = null;
            BufferedWriter BW2 = null;

            try {

                Archivo2 = new File("./Archivo_BaseDeDatos.sql");
                FW2 = new FileWriter(Archivo2, true);
                BW2 = new BufferedWriter(FW2);
                BW2.write(Codigo);
                BW2.flush();//hace un vaciado del RAM al ROM
            } catch (Exception e) {

            }
            try {
                BW2.close();
                FW2.close();
            } catch (IOException e) {

            }

        } else if (nodo_seleccionado_base_de_datos.getUserObject() instanceof Llave_primaria) {
            String Codigo = ((Llave_primaria) nodo_seleccionado_base_de_datos.getUserObject()).getCodigo();

            ta_comando_base_de_datos.setText(Codigo);

            File Archivo2 = null;
            FileWriter FW2 = null;
            BufferedWriter BW2 = null;

            try {

                Archivo2 = new File("./Archivo_BaseDeDatos.sql");
                FW2 = new FileWriter(Archivo2, true);
                BW2 = new BufferedWriter(FW2);
                BW2.write(Codigo);
                BW2.flush();//hace un vaciado del RAM al ROM
            } catch (Exception e) {

            }
            try {
                BW2.close();
                FW2.close();
            } catch (IOException e) {

            }
        } else if (nodo_seleccionado_base_de_datos.getUserObject() instanceof Llave_foranea) {
            String Codigo = ((Llave_foranea) nodo_seleccionado_base_de_datos.getUserObject()).getCodigo();

            ta_comando_base_de_datos.setText(Codigo);

            File Archivo2 = null;
            FileWriter FW2 = null;
            BufferedWriter BW2 = null;

            try {

                Archivo2 = new File("./Archivo_BaseDeDatos.sql");
                FW2 = new FileWriter(Archivo2, true);
                BW2 = new BufferedWriter(FW2);
                BW2.write(Codigo);
                BW2.flush();//hace un vaciado del RAM al ROM
            } catch (Exception e) {

            }
            try {
                BW2.close();
                FW2.close();
            } catch (IOException e) {

            }
        }


    }//GEN-LAST:event_Ver_codigoActionPerformed

    private void jButton11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MouseClicked
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        int Seleccion = fileChooser.showSaveDialog(this);

        if (Seleccion == JFileChooser.APPROVE_OPTION) {
            File Archivo = null;
            DefaultTreeModel modeloARBOL = (DefaultTreeModel) jt_diagrama.getModel();

            try {
                Archivo = fileChooser.getSelectedFile();

                FileOutputStream Salida = new FileOutputStream(Archivo);
                ObjectOutputStream Objeto = new ObjectOutputStream(Salida);
                Objeto.writeObject(modeloARBOL);
                Objeto.flush();
                Objeto.close();
                Salida.close();
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
//////////////////////////////////////////////////////////////////////////////////////////
        File Archivo2 = null;

        try {
            Archivo2 = new File("./1.ac");

            FileOutputStream Salida2 = new FileOutputStream(Archivo2);
            ObjectOutputStream Objeto2 = new ObjectOutputStream(Salida2);
            Objeto2.writeObject(Clases);
            Objeto2.flush();
            Objeto2.close();
            Salida2.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

        File Archivo3 = null;

        try {
            Archivo3 = new File("./2.ac");

            FileOutputStream Salida3 = new FileOutputStream(Archivo3);
            ObjectOutputStream Objeto3 = new ObjectOutputStream(Salida3);
            Objeto3.writeObject(Clases);
            Objeto3.flush();
            Objeto3.close();
            Salida3.close();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_jButton11MouseClicked

    private void jButton12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton12MouseClicked
        // TODO add your handling 
        File fichero = null;

        try {
            JFileChooser jfc = new JFileChooser();

            int Seleccion = jfc.showOpenDialog(this);

            if (Seleccion == JFileChooser.APPROVE_OPTION) {
                fichero = jfc.getSelectedFile();

                FileInputStream Entrada = new FileInputStream(fichero);
                ObjectInputStream Objeto = new ObjectInputStream(Entrada);

                DefaultTreeModel x = (DefaultTreeModel) Objeto.readObject();
                jt_diagrama.setModel(x);
            }
        } catch (EOFException ex) {

        } catch (Exception e) {
            e.printStackTrace();
        }

/////////////////////////////////////////////////////////////////////////////////        
        File Archivo2 = null;
        try {
            Archivo2 = new File("./1.ac");

            FileInputStream Entrada2 = new FileInputStream(Archivo2);
            ObjectInputStream Objeto2 = new ObjectInputStream(Entrada2);

            ArrayList Temp;
            try {
                Temp = (ArrayList) Objeto2.readObject();
                Clases = Temp;
            } catch (EOFException e) {

            } finally {
                Objeto2.close();
                Entrada2.close();
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

        File Archivo3 = null;
        try {
            Archivo3 = new File("./1.ac");

            FileInputStream Entrada3 = new FileInputStream(Archivo3);
            ObjectInputStream Objeto3 = new ObjectInputStream(Entrada3);

            ArrayList Temp;
            try {
                Temp = (ArrayList) Objeto3.readObject();
                interfaces = Temp;
            } catch (EOFException e) {

            } finally {
                Objeto3.close();
                Entrada3.close();
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton12MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Diagramador.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Diagramador.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Diagramador.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Diagramador.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Diagramador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Abstraccion;
    private javax.swing.JMenu Agregar;
    private javax.swing.JPopupMenu Menu2;
    private javax.swing.JMenuItem Ver_codigo;
    private javax.swing.JComboBox cb_interfaces_implementar;
    private javax.swing.JComboBox cb_tipo_atributo_agregar;
    private javax.swing.JComboBox cb_tipo_atributo_modificar;
    private javax.swing.JComboBox cb_visibilidad_atributo_agregar;
    private javax.swing.JComboBox cb_visibilidad_atributo_modificar;
    private javax.swing.JComboBox cb_visibilidad_clase_agregar;
    private javax.swing.JComboBox cb_visibilidad_clase_modificar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JDialog jd_agregar_atributos;
    private javax.swing.JDialog jd_agregar_clase;
    private javax.swing.JDialog jd_agregar_interfaz;
    private javax.swing.JDialog jd_agregar_metodos;
    private javax.swing.JDialog jd_implementar_interfaz;
    private javax.swing.JDialog jd_modificar_atributos;
    private javax.swing.JDialog jd_modificar_clase;
    private javax.swing.JDialog jd_modificar_metodos;
    private javax.swing.JMenuItem jmi_agregar_atributo;
    private javax.swing.JMenuItem jmi_agregar_clase;
    private javax.swing.JMenuItem jmi_agregar_interfaz;
    private javax.swing.JMenuItem jmi_agregar_metodo;
    private javax.swing.JMenuItem jmi_deshacer_abstracta;
    private javax.swing.JMenuItem jmi_eliminar;
    private javax.swing.JMenuItem jmi_generar_codigo;
    private javax.swing.JMenuItem jmi_hacer_abstracta;
    private javax.swing.JMenuItem jmi_implementar_interfaz;
    private javax.swing.JMenuItem jmi_modificar;
    private javax.swing.JPopupMenu jppm_menu1;
    private javax.swing.JTree jt_base_de_datos;
    private javax.swing.JTree jt_diagrama;
    private javax.swing.JTextArea ta_comando_base_de_datos;
    private javax.swing.JTextArea ta_metodo_agregar;
    private javax.swing.JTextArea ta_metodo_modificar;
    private javax.swing.JTextField tf_nombre_atributo_agregar;
    private javax.swing.JTextField tf_nombre_atributo_modificar;
    private javax.swing.JTextField tf_nombre_clase_agregar;
    private javax.swing.JTextField tf_nombre_clase_modificar;
    private javax.swing.JTextField tf_nombre_interfaz_agregar;
    private javax.swing.JTextField tf_nombre_metodo_agregar;
    private javax.swing.JTextField tf_nombre_metodo_modificar;
    // End of variables declaration//GEN-END:variables
    DefaultMutableTreeNode nodo_seleccionado;
    DefaultMutableTreeNode nodo_seleccionado_base_de_datos;
    ArrayList<Clases> Clases = new ArrayList();
    ArrayList<Interfaces> interfaces = new ArrayList();
    int Contador = 0;
    int Contador_abs = 0;
    int Contador_eliminar_abs = 0;
    int Clases_a_generar = 0;
    String Codigo_generado = "";
    String Nombre_archivo = "";
    ArrayList<Atributos> temp;
    ArrayList<Tablas> tablas = new ArrayList();
    ArrayList primarias = new ArrayList();

    public void Nombre_clases(DefaultMutableTreeNode nodo, String Nuevo_pertenece) {//cambiar nombre a clases padres e hijas

        if (nodo.getUserObject() instanceof Clases && Contador == 0) {
            ((Clases) nodo.getUserObject()).setPerteneceA(Nuevo_pertenece);
            ((Clases) nodo.getUserObject()).setNombre(Nuevo_pertenece);
            Contador++;
        } else if (nodo.getUserObject() instanceof Clases && Contador != 0) {
            ((Clases) nodo.getUserObject()).setPerteneceA(Nuevo_pertenece);
        } else if (nodo.getUserObject() instanceof Atributos) {
            ((Atributos) nodo.getUserObject()).setReferencia_clase(Nuevo_pertenece);
        } else if (nodo.getUserObject() instanceof Metodos) {
            ((Metodos) nodo.getUserObject()).setReferencia_clase(Nuevo_pertenece);
        }

        if (nodo.getChildCount() >= 0) {
            for (Enumeration e1 = nodo.children(); e1.hasMoreElements();) {
                DefaultMutableTreeNode nodo2 = (DefaultMutableTreeNode) e1.nextElement();
                Nombre_clases(nodo2, ((Clases) nodo.getUserObject()).getNombre());
            }
        }
    }

    public void Eliminar_metodos(JTree tree, String Nombre_metodo) {//recorrer en profundidad el arbol
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) (tree.getModel().getRoot());
        Enumeration<?> enumeration = root.breadthFirstEnumeration();
        while (enumeration.hasMoreElements()) {
            Object Elemento = enumeration.nextElement();
            if (Elemento.toString().contains(Nombre_metodo) && Elemento.toString().contains("Metodo:")) {
                DefaultTreeModel m = (DefaultTreeModel) jt_diagrama.getModel();
                m.removeNodeFromParent((MutableTreeNode) Elemento);
                m.reload();
            }

        }
    }

    public void Eliminar_interfaces(JTree tree, String Nombre_interfaz) {//recorrer en profundidad el arbol
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) (tree.getModel().getRoot());
        Enumeration<?> enumeration = root.breadthFirstEnumeration();
        while (enumeration.hasMoreElements()) {
            Object Elemento = enumeration.nextElement();
            if (Elemento.toString().contains(Nombre_interfaz) && Elemento.toString().contains("implements")) {
                DefaultTreeModel m = (DefaultTreeModel) jt_diagrama.getModel();
                DefaultMutableTreeNode nodo = ((DefaultMutableTreeNode) Elemento);
                ((Clases) nodo.getUserObject()).setInterfaz_implementada("");
                m.reload();
            }

        }
    }

    public void Metodos_a_clases(DefaultMutableTreeNode nodo, Metodos metodo) {

        if (nodo.getUserObject() instanceof Clases) {
            DefaultMutableTreeNode metodo1 = new DefaultMutableTreeNode(metodo);
            nodo.add(metodo1);
        }

        if (nodo.getChildCount() >= 0) {
            for (Enumeration e1 = nodo.children(); e1.hasMoreElements();) {
                DefaultMutableTreeNode nodo2 = (DefaultMutableTreeNode) e1.nextElement();
                Metodos_a_clases(nodo2, metodo);
            }
        }
    }

    public void Modificar_metodos_interfaces(JTree tree, String Nombre_metodo, String Nombre_nuevo, String Metodo_nuevo) {//recorrer en profundidad el arbol
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) (tree.getModel().getRoot());
        Enumeration<?> enumeration = root.breadthFirstEnumeration();
        while (enumeration.hasMoreElements()) {
            Object Elemento = enumeration.nextElement();
            if (Elemento.toString().contains(Nombre_metodo)) {
                DefaultTreeModel m = (DefaultTreeModel) jt_diagrama.getModel();
                DefaultMutableTreeNode nodo = ((DefaultMutableTreeNode) Elemento);
                ((Metodos) nodo.getUserObject()).setNombre(Nombre_nuevo);
                ((Metodos) nodo.getUserObject()).setMetodo(Metodo_nuevo);
                m.reload();
            }

        }
    }

    public void Metodos_abstractos_a_clases(DefaultMutableTreeNode nodo, Metodos metodo, Metodos metodo_hijas) {//cambiar nombre a clases padres e hijas

        if (nodo.getUserObject() instanceof Clases && Contador_abs == 0) {
            DefaultMutableTreeNode metodo1 = new DefaultMutableTreeNode(metodo);
            nodo.add(metodo1);
            Contador_abs++;
        } else {
            DefaultMutableTreeNode metodo1 = new DefaultMutableTreeNode(metodo_hijas);
            nodo.add(metodo1);
        }

        if (nodo.getChildCount() >= 0) {
            for (Enumeration e1 = nodo.children(); e1.hasMoreElements();) {
                DefaultMutableTreeNode nodo2 = (DefaultMutableTreeNode) e1.nextElement();
                Metodos_a_clases(nodo2, metodo);
            }
        }
    }

    String Nombre_metodo_ab = "";

    public void Eliminar_metodos_abstractos(DefaultMutableTreeNode nodo) {//cambiar nombre a clases padres e hijas

        if (nodo.getUserObject() instanceof Metodos
                && ((Metodos) nodo.getUserObject()).getMetodo().contains("abstract")
                && Contador_eliminar_abs == 0) {
            DefaultTreeModel m = (DefaultTreeModel) jt_diagrama.getModel();
            m.removeNodeFromParent(nodo);
            m.reload();
            Nombre_metodo_ab = ((Metodos) nodo.getUserObject()).getNombre();
        } else if (Contador_eliminar_abs != 0 && ((Metodos) nodo.getUserObject()).equals(Nombre_metodo_ab)) {
            DefaultTreeModel m = (DefaultTreeModel) jt_diagrama.getModel();
            m.removeNodeFromParent(nodo);
            m.reload();
        }

        if (nodo.getChildCount() >= 0) {
            for (Enumeration e1 = nodo.children(); e1.hasMoreElements();) {
                DefaultMutableTreeNode nodo2 = (DefaultMutableTreeNode) e1.nextElement();
                Eliminar_metodos_abstractos(nodo2);
            }
        }
    }

    //generar codigo
    public void Generar_codigo2(DefaultMutableTreeNode nodo) {

        if (nodo.getUserObject() instanceof Clases && !nodo.getUserObject().toString().contains("Interfaz")) {
            String Nombre = ((Clases) nodo.getUserObject()).getNombre();
            String Encapsulamiento = ((Clases) nodo.getUserObject()).getEncapsulamiento();
            String Abstraccione = ((Clases) nodo.getUserObject()).getAbstract();
            String Interfaz_implementada = ((Clases) nodo.getUserObject()).getInterfaz_implementada();
            String PerteneceA = ((Clases) nodo.getUserObject()).getPerteneceA();
            if (PerteneceA.equals("Proyecto")) {
                PerteneceA = Nombre;
            } else {
                PerteneceA = ((Clases) nodo.getUserObject()).getPerteneceA();
            }

            Nombre_archivo = Nombre;

            if (Abstraccione.equals("") && Interfaz_implementada.equals("") && Nombre.equals(PerteneceA)) {
                Codigo_generado += "package prueba" + "\r\n" + Encapsulamiento + " "
                        + Nombre + "{" + "\r\n" + "\r\n";
            } else if ((!Abstraccione.equals("")) && Interfaz_implementada.equals("") && Nombre.equals(PerteneceA)) {
                Codigo_generado += "package prueba" + "\r\n" + Encapsulamiento + " " + Abstraccione + " "
                        + Nombre + "{" + "\r\n" + "\r\n";
            } else if (Abstraccione.equals("") && (!Interfaz_implementada.equals("")) && Nombre.equals(PerteneceA)) {
                Codigo_generado += "package prueba" + "\r\n" + Encapsulamiento + " "
                        + Nombre + " " + "implements " + Interfaz_implementada + "{" + "\r\n" + "\r\n";
            } else if ((!Abstraccione.equals("")) && (!Interfaz_implementada.equals("")) && Nombre.equals(PerteneceA)) {
                Codigo_generado += "package prueba" + "\r\n" + Encapsulamiento + " " + Abstraccione + " "
                        + Nombre + " " + "implements " + Interfaz_implementada + "{" + "\r\n" + "\r\n";
            } else if (Abstraccione.equals("") && Interfaz_implementada.equals("") && (!Nombre.equals(PerteneceA))) {
                Codigo_generado += "package prueba" + "\r\n" + Encapsulamiento + " " + " "
                        + Nombre + " extends " + PerteneceA + " " + "{" + "\r\n" + "\r\n";
            } else if ((!Abstraccione.equals("")) && Interfaz_implementada.equals("") && (!Nombre.equals(PerteneceA))) {
                Codigo_generado += "package prueba" + "\r\n" + Encapsulamiento + " " + Abstraccione + " "
                        + Nombre + " extends " + PerteneceA + " " + "{" + "\r\n" + "\r\n";
            } else if (Abstraccione.equals("") && (!Interfaz_implementada.equals("")) && (!Nombre.equals(PerteneceA))) {
                Codigo_generado += "package prueba" + "\r\n" + Encapsulamiento + " "
                        + Nombre + " extends " + PerteneceA + " " + "implements " + Interfaz_implementada + "{" + "\r\n" + "\r\n";
            } else if ((!Abstraccione.equals("")) && (!Interfaz_implementada.equals("")) && (!Nombre.equals(PerteneceA))) {
                Codigo_generado += "package prueba" + "\r\n" + Encapsulamiento + " " + Abstraccione + " "
                        + Nombre + " extends " + PerteneceA + " " + "implements " + Interfaz_implementada + "{" + "\r\n" + "\r\n";
            }

            String Visibilidad2, Tipo2, Nombre2;
            for (int j = 0; j < Clases.size(); j++) {
                if (Clases.get(j).getNombre().equals(Nombre_archivo)) {
                    for (int k = 0; k < Clases.get(j).getAtributos().size(); k++) {
                        Visibilidad2 = Clases.get(j).getAtributos().get(k).getVisibilidad();
                        Tipo2 = Clases.get(j).getAtributos().get(k).getTipo();
                        Nombre2 = Clases.get(j).getAtributos().get(k).getNombre();
                        Codigo_generado += Visibilidad2 + " " + Tipo2 + " " + Nombre2 + ";" + "\r\n";
                    }
                }
            }

            if (PerteneceA.equals(Nombre)) {
                Codigo_generado += "public " + Nombre + "(){" + "\r\n" + "}" + "\r\n" + "\r\n";
            } else {
                Codigo_generado += "public " + Nombre + "(){" + "\r\n" + "super();" + "\r\n" + "}" + "\r\n" + "\r\n";
            }

            Codigo_generado += "public " + Nombre + "(";
            for (int j = 0; j < Clases.size(); j++) {
                if (Clases.get(j).getNombre().equals(Nombre_archivo)) {
                    for (int k = 0; k < Clases.get(j).getAtributos().size(); k++) {
                        Visibilidad2 = Clases.get(j).getAtributos().get(k).getVisibilidad();
                        Tipo2 = Clases.get(j).getAtributos().get(k).getTipo();
                        Nombre2 = Clases.get(j).getAtributos().get(k).getNombre();
                        Codigo_generado += Tipo2 + " " + Nombre2 + ", ";
                    }
                }
            }

            if (PerteneceA.equals(Nombre)) {
                Codigo_generado += "){" + "\r\n";
                for (int j = 0; j < Clases.size(); j++) {
                    if (Clases.get(j).getNombre().equals(Nombre_archivo)) {
                        for (int k = 0; k < Clases.get(j).getAtributos().size(); k++) {
                            Visibilidad2 = Clases.get(j).getAtributos().get(k).getVisibilidad();
                            Tipo2 = Clases.get(j).getAtributos().get(k).getTipo();
                            Nombre2 = Clases.get(j).getAtributos().get(k).getNombre();
                            Codigo_generado += "this." + Nombre2 + "= " + Nombre2 + "\r\n";
                        }
                    }
                }
            } else if ((!PerteneceA.equals(Nombre))) {
                Codigo_generado += "){" + "\r\n";

                Codigo_generado += "super(";
                for (int i = 0; i < Clases.size(); i++) {
                    if (Clases.get(i).getNombre().equals(PerteneceA)) {
                        for (int j = 0; j < Clases.get(i).getAtributos().size(); j++) {
                            Codigo_generado += Clases.get(i).getAtributos().get(j).getNombre() + ", ";
                        }
                    }
                }
                Codigo_generado += ")" + "\r\n";

                for (int j = 0; j < Clases.size(); j++) {
                    if (Clases.get(j).getNombre().equals(Nombre_archivo)) {
                        for (int k = 0; k < Clases.get(j).getAtributos().size(); k++) {
                            Visibilidad2 = Clases.get(j).getAtributos().get(k).getVisibilidad();
                            Tipo2 = Clases.get(j).getAtributos().get(k).getTipo();
                            Nombre2 = Clases.get(j).getAtributos().get(k).getNombre();
                            Codigo_generado += "this." + Nombre2 + "= " + Nombre2 + "\r\n";
                        }
                    }
                }
            }

            Codigo_generado += "}" + "\r\n" + "\r\n";
            for (int j = 0; j < Clases.size(); j++) {
                if (Clases.get(j).getNombre().equals(Nombre_archivo)) {
                    for (int k = 0; k < Clases.get(j).getAtributos().size(); k++) {
                        Visibilidad2 = Clases.get(j).getAtributos().get(k).getVisibilidad();
                        Tipo2 = Clases.get(j).getAtributos().get(k).getTipo();
                        Nombre2 = Clases.get(j).getAtributos().get(k).getNombre();
                        Codigo_generado += "public " + Tipo2 + " get" + Nombre2 + "(){"
                                + "\r\n" + "return " + Nombre2 + ";" + "\r\n" + "}" + "\r\n" + "\r\n";

                        Codigo_generado += "public " + Tipo2 + " set" + Nombre2 + "("
                                + Tipo2 + " " + Nombre2 + ")" + "{" + "\r\n" + "this." + Nombre2
                                + "= " + Nombre2 + ";" + "\r\n" + "}" + "\r\n" + "\r\n";

                    }
                }
            }

            Codigo_generado += "@Override" + "\r\n";
            Codigo_generado += "public String toString(){" + "\r\n";
            Codigo_generado += "return" + "\0" + Nombre + "{" + "\0";
            for (int j = 0; j < Clases.size(); j++) {
                if (Clases.get(j).getNombre().equals(Nombre_archivo)) {
                    for (int k = 0; k < Clases.get(j).getAtributos().size(); k++) {
                        Visibilidad2 = Clases.get(j).getAtributos().get(k).getVisibilidad();
                        Tipo2 = Clases.get(j).getAtributos().get(k).getTipo();
                        Nombre2 = Clases.get(j).getAtributos().get(k).getNombre();
                        Codigo_generado += "\0" + Nombre2 + "=" + "\0" + Nombre2;
                    }
                }
            }
            Codigo_generado += "\0" + "}" + "\0" + "\r\n" + "}" + "\r\n" + "\r\n";
            for (int i = 0; i < Clases.size(); i++) {
                if (Clases.get(i).getNombre().equals(Nombre_archivo)) {
                    for (int j = 0; j < Clases.get(i).getMetodos().size(); j++) {
                        if (Clases.get(i).getMetodos().get(j).getReferencia_interfaz().equals("")) {
                            Codigo_generado += Clases.get(i).getMetodos().get(j).getMetodo() + "\r\n";
                        } else {
                            Codigo_generado += "@Override" + "\r\n";
                            Codigo_generado += Clases.get(i).getMetodos().get(j).getMetodo() + "\r\n";
                        }

                    }
                }
            }

            Codigo_generado += "\r\n" + "}";

            File Archivo = null;
            FileWriter FW = null;
            BufferedWriter BW = null;

            try {
                Archivo = new File("./" + Nombre_archivo + ".txt");
                FW = new FileWriter(Archivo, true);
                BW = new BufferedWriter(FW);
                BW.write(Codigo_generado);
                BW.flush();//hace un vaciado del RAM al ROM
            } catch (Exception e) {

            }

            try {
                BW.close();
                FW.close();
            } catch (IOException e) {

            }
        }

        Nombre_archivo = "";
        Codigo_generado = "";

        if (nodo.getChildCount() >= 0) {
            for (Enumeration e1 = nodo.children(); e1.hasMoreElements();) {
                DefaultMutableTreeNode nodo2 = (DefaultMutableTreeNode) e1.nextElement();
                Generar_codigo2(nodo2);
            }
        }
    }

    public void Campos_a_tablas(JTree tree, String Nombre_tabla, String[] Variables) {//recorrer en profundidad el arbol
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) (tree.getModel().getRoot());
        Enumeration<?> enumeration = root.breadthFirstEnumeration();
        while (enumeration.hasMoreElements()) {
            Object Elemento = enumeration.nextElement();
            if (Elemento.toString().contains(Nombre_tabla)) {
                DefaultTreeModel m = (DefaultTreeModel) jt_base_de_datos.getModel();
                DefaultMutableTreeNode tabla = (DefaultMutableTreeNode) Elemento;
                for (int i = 0; i < Variables.length; i++) {
                    tabla.add(new DefaultMutableTreeNode(new Campos(Variables[i], Nombre_tabla)));
                    m.reload();
                }
            }

        }
    }

    public void Eliminar_campos(JTree tree, String Nombre_tabla, String[] Variables) {//recorrer en profundidad el arbol
        int romper = 0;
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) (tree.getModel().getRoot());
        Enumeration<?> enumeration = root.breadthFirstEnumeration();
        DefaultTreeModel m = (DefaultTreeModel) jt_base_de_datos.getModel();
        while (enumeration.hasMoreElements() && romper == 0) {
            Object Elemento = enumeration.nextElement();
            DefaultMutableTreeNode campo = (DefaultMutableTreeNode) Elemento;

            for (int i = 0; i < Variables.length; i++) {
                if (Elemento.toString().contains(Variables[i]) && ((Campos) campo.getUserObject()).getReferencia_tabla().contains(Nombre_tabla)) {
                    m.removeNodeFromParent((MutableTreeNode) Elemento);
                    m.reload();
                    romper++;
                }
            }

        }

    }
}
